[{"/Users/admin/Desktop/Development/React/urlshortner/url-shortner-client/src/index.js":"1","/Users/admin/Desktop/Development/React/urlshortner/url-shortner-client/src/App.js":"2","/Users/admin/Desktop/Development/React/urlshortner/url-shortner-client/src/components/Form.js":"3"},{"size":1005,"mtime":1653666912384,"results":"4","hashOfConfig":"5"},{"size":508,"mtime":1653669946738,"results":"6","hashOfConfig":"5"},{"size":5135,"mtime":1653719630192,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ai6lvx",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/admin/Desktop/Development/React/urlshortner/url-shortner-client/src/index.js",[],[],"/Users/admin/Desktop/Development/React/urlshortner/url-shortner-client/src/App.js",["19"],[],"import { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"./components/Form\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n          <Routes>\n            <Route path=\"/\" element={<Form />} />\n            <Route path=\"/app\" element={<Form />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/admin/Desktop/Development/React/urlshortner/url-shortner-client/src/components/Form.js",["20","21"],[],"import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { getDatabase, child, ref, set, get } from \"firebase/database\";\nimport { isWebUri } from \"valid-url\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\n\nconst Form = () => {\n  const [formData, setFormData] = useState({\n    longURL: \"\",\n    generatedURL: \"\",\n    loading: false,\n    errors: [],\n    errorMessages: {},\n    toolTipMessage: \"Copy To Clipboard\",\n  });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setFormData({\n      ...formData,\n      loading: true,\n      generatedURL: \"\",\n    });\n\n    // validate the user input\n    var isFormValid = validateInput();\n    if (!isFormValid) {\n      return;\n    }\n\n    var generatedKey = nanoid(5);\n    var generatedURL = \"smallurl.com/\" + generatedKey;\n\n    const db = getDatabase();\n    set(ref(db, \"/\" + generatedKey), {\n      generatedKey: generatedKey,\n      longURL: formData.longURL,\n      generatedURL: generatedURL,\n    })\n      .then((result) => {\n        setFormData({\n          ...formData,\n          generatedURL: generatedURL,\n          loading: false,\n          errors: [],\n        });\n      })\n      .catch((e) => {\n        //handle error\n      });\n  };\n\n  //haserror\n  //Checks if feild has an error\n  const hasError = (key) => {\n    return formData.errors.indexOf(key) !== -1;\n  };\n\n  // handle change\n  // Save the content of the form as the user is typing!\n  const handleChange = (e) => {\n    const { id, value } = e.target;\n    setFormData(() => ({\n      ...formData,\n      [id]: value,\n    }));\n  };\n\n  const validateInput = () => {\n    var errors = [];\n    var errorMessages = formData.errorMessages;\n\n    //Validate Long URL\n    if (formData.longURL.length === 0) {\n      errors.push(\"longURL\");\n      errorMessages[\"longURL\"] = \"Please enter your URL!\";\n    } else if (!isWebUri(formData.longURL)) {\n      errors.push(\"longURL\");\n      errorMessages[\"longURL\"] = \"Please a URL in the form of https://www....\";\n    }\n\n    setFormData({\n      ...formData,\n      errors: errors,\n      errorMessages: errorMessages,\n      // loading: false,\n    });\n\n    if (errors.length > 0) {\n      return false;\n    }\n    return true;\n  };\n\n  const copyToClipBoard = () => {\n    navigator.clipboard.writeText(formData.generatedURL);\n    setFormData({\n      ...formData,\n      toolTipMessage: \"Copied!\",\n    });\n  };\n\n  return (\n    <div className=\"container\">\n      <form autoComplete=\"off\">\n        <h3>Small URL</h3>\n\n        <div className=\"form-group\">\n          <label>Enter Your Long URL</label>\n          <input\n            id=\"longURL\"\n            onChange={handleChange}\n            value={formData.longURL}\n            type=\"url\"\n            required\n            placeholder=\"https://www...\"\n            className={\n              hasError(\"longURL\") ? \"form-control is-invalid\" : \"form-control\"\n            }\n          />\n        </div>\n        <div\n          className={hasError(\"longURL\") ? \"text-danger\" : \"visually-hidden\"}\n        >\n          {formData.errorMessages.longURL}\n        </div>\n\n        <button className=\"btn btn-primary\" type=\"button\" onClick={onSubmit}>\n          {formData.loading ? (\n            <div>\n              <span\n                className=\"spinner-border spinner-border-sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              ></span>\n            </div>\n          ) : (\n            <div>\n              <span\n                className=\"visually-hidden spinner-border spinner-border-sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              ></span>\n              <span>Squeez</span>\n            </div>\n          )}\n        </button>\n\n        {formData.generatedURL === \"\" ? (\n          <div></div>\n        ) : (\n          <div className=\"generatedurl\">\n            <span>Your generated URL is: </span>\n            <div className=\"input-group mb-3\">\n              <input\n                disabled\n                type=\"text\"\n                value={formData.generatedURL}\n                className=\"form-control\"\n                placeholder=\"Recipient's username\"\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n              />\n              <div className=\"input-group-append\">\n                <OverlayTrigger\n                  key={\"top\"}\n                  placement={\"top\"}\n                  overlay={\n                    <Tooltip id={`tooltip-${\"top\"}`}>\n                      {formData.toolTipMessage}\n                    </Tooltip>\n                  }\n                >\n                  <button\n                    onClick={copyToClipBoard}\n                    data-toggle=\"tooltip\"\n                    data-placement=\"top\"\n                    title=\"Tooltip on top\"\n                    className=\"btn btn-outline-secondary\"\n                    type=\"button\"\n                  >\n                    Copy\n                  </button>\n                </OverlayTrigger>\n              </div>\n            </div>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n",{"ruleId":"22","severity":1,"message":"23","line":1,"column":10,"nodeType":"24","messageId":"25","endLine":1,"endColumn":23},{"ruleId":"22","severity":1,"message":"26","line":3,"column":23,"nodeType":"24","messageId":"25","endLine":3,"endColumn":28},{"ruleId":"22","severity":1,"message":"27","line":3,"column":40,"nodeType":"24","messageId":"25","endLine":3,"endColumn":43},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'child' is defined but never used.","'get' is defined but never used."]